--local gloabal varaibles determing starting positional info?
--Level 3 Map
math.randomseed(os.time())
local edge = 240
local bottom_edge = 85
local top_edge = 606
local hand_size = 5
local card_size = 130
local vial_num = 4
local vial_edge = 35
local vial_height = 662
local vial_size = 50
local v_vial_edge = 1239
local v_vial_height = 669
go.property("v_ready", false)
go.property("p_ready", false)
go.property("p_c_t", false)
go.property("v_c_t", false)
go.property("card_val", 0)
go.property("dmg_val", 0)
go.property("plyr_card", 0)
go.property("The_fight", false)
go.property("primed_player", false)
go.property("primed_villian", false)
go.property("card_destroyed", false)
go.property("spawn_point_card", vmath.vector3(0,0,0))
go.property("active_turn", true)
go.property("v_destroyed", false)
go.property("self_destruct", false)
go.property("map_no_tie", true)
go.property("add_damage", false)
go.property("level_1", false)
go.property("level_2", false)
go.property("level_3", true)
go.property("acceptable_turn", true)
--go.property("sent_url")

--Initializes the map
function init(self)
	print("RAAAAAAAAAAAAAWGHT HEEEEYAAAA!!!")
	--sets up a table to hold all active cards
	self.index_loc = 0
	self.v_hand_url = {}
	self.hand = {}
	self.h_counter = 0
	self.pre_h_counter = 0
	self.pre_v_counter = 0
	self.v_counter = 0
	self.hand_size_player = 5
	self.v_hand_size = 5
	self.v_hand = {}
	self.ingrid_HV = {}
	self.iHV_url = {}
	self.Vain_HV = {}
	self.vHV_url = {}
	self.sender = {
		["player"] = "empty", ["villian"] = "empty"}
	--sends start message to build cards for hand.
	msg.post("#", "start")
	--allows for user input
	msg.post(".", "acquire_input_focus")

	self.abc = 4
	self.counter = 0
	self.plyr_card_url = "empty"
	self.v_card_url = "empty"
	--go.set("/levels#main", "level_1", self.level_1)
	--go.set("/levels#main", "level_2", self.level_2)
	--go.set("/levels#main", "level_3", self.level_3)
end
--This function uses factory calls to build the cards.
local function build_card(self)
	for x  = 0, hand_size - 1 do -- for loop that loops through the hand till zero is hit and x is incremented upwards.
		--modifies the edge for each new card on the x axis.
		edge = edge + card_size
		--creates a local go instance of a card.
		local c = factory.create("go#card_factory", vmath.vector3(edge, bottom_edge, 1), null, null, .7)
		local v = factory.create("go#card_factory", vmath.vector3(edge, top_edge, 1), nul, nul, .3)
		--stores the new card in the hand
		self.hand[x] = {id = c, x = edge, y = bottom_edge}
		self.v_hand[x] = {id = v, x = edge, y = top_edge}
		msg.post(self.v_hand[x].id, "villian")
	end
end

local function empty_hand(self, card_id)
	local x = 0
	for x = 0, hand_size - 1 do
		if self.hand[x] == card_id then
			self.hand[x] = nil
		end
	end
end

local function vial_spawn(self) 
	for x = 0, vial_num - 1 do 
		vial_edge = vial_edge + vial_size
		local c = factory.create("/Ingrid_HV_Factory#Ingrid_HV_factory", vmath.vector3(vial_edge, vial_height, 1), nul, nul, .50)
		self.ingrid_HV = c
	end
end

local function v_vial_spawn(self) 
	for x = 0, vial_num - 1 do 
		v_vial_edge = v_vial_edge - vial_size
		local c = factory.create("/Vain_HV_Factory#Vain_HV_Factory", vmath.vector3(v_vial_edge, v_vial_height, 1), nul, nul, .50)
		self.vHV_url[x] = msg.url(c)
		self.Vain_HV[x] = c
	end
end

local function sort_FurFur_hand(self)
	--write a varaible for each url and then just directly compare and manually build the table
	--in the correct order. First pick two of the five
	--then compare them and put the smaller value in front of the other in the table.
	--then grab the third value and compare it to the first. if it is bigger then
	--put it behind the first value, move that first value to the second values spot
	--and put the third value in a new spot at the end of the table. repeat this two more times.
	--Kaiser furfur will be a similar prospect
	local largest_url = "empty"
	local largest_val = 0
	local hand_size_lcl = 5
	local comp_val = 0
	for x = 0, hand_size_lcl - 1 do
		if x == 0 and self.v_hand_url[x] ~= nil then
			largest_url = self.v_hand_url[x]
			largest_val = go.get(self.v_hand_url[x], "value")
			self.index_loc = x
		elseif self.v_hand_url[x] ~= nil then
			comp_val = go.get(self.v_hand_url[x], "value")
			if comp_val > largest_val then
				largest_val = comp_val
				largest_url = self.v_hand_url[x]
				self.index_loc = x
			end
		end
	end
	return largest_url
end

function on_message(self, message_id, message, sender)
	--only active for start messages
	if message_id == hash("clear_all") then
		self.self_destruct = true
	end
	if message_id == hash("player_has_won") then
		--msg.post(".", "acquire_input_focus")
		msg.post("/level_guis#victory_screen", "show_v_menu")
	end
	if message_id == hash("player_has_lost") then
		msg.post("/level_guis#lost_screen", "show_lost_menu")
		msg.post("/level_guis#lost_screen", "level_3")
	end
	if message_id == hash("v_back") then
		self.v_hand_url[self.counter] = msg.url(message.val)
		self.counter = self.counter + 1
	end
	if message_id == hash("choose_a_card") then
		local index = self.abc
		local url_to_play = sort_FurFur_hand(self)
		go.set(url_to_play, "move_me", true)
		self.card_val = go.get(url_to_play, "value")
		print("card_val", self.card_val)
		print("plyr_card", self.plyr_card)
		self.v_hand_url[self.index_loc] = nil
		self.v_hand[self.index_loc] = nil
		self.abc = self.abc - 1
		self.primed_player = true
		self.v_destroyed = false
	end
	if message_id == hash("start") then
		build_card(self) --builds the hand of cards
		vial_spawn(self)
		v_vial_spawn(self)
	end
	if message_id == hash("v_ready") then
		self.v_ready = true
		self.v_card_url = message.val
	end
	if message_id == hash("p_ready") then
		self.p_ready = true
		self.player_card_url = message.val
		self.player_card_id = message.card_id
	end
	if message_id == hash("trap") then
		local url_val = msg.url(message.val)
		self.iHV_url[self.pre_h_counter] = url_val
		self.pre_h_counter = self.pre_h_counter + 1
	end
	if message_id == hash("v_trap") then
		local url_v_val = msg.url(message.val)
		self.vHV_url[self.pre_v_counter] = url_v_val
		--print(self.vHV_url[self.pre_v_counter])
		self.pre_v_counter = self.pre_v_counter + 1
	end
end

local function current_hero_vial(self)
	local val = go.get(self.iHV_url[self.h_counter], "health_per")
	if val <= 0 and self.h_counter < 4 then
		self.h_counter = self.h_counter + 1
	end
	msg.post("/player#player", "m_n_bttle", {val = self.iHV_url[self.h_counter]})
	if self.add_damage and self.h_counter < 4 then
		self.add_damage = false
		local x_val = go.get(self.iHV_url[self.h_counter], "health_per")
		x_val = x_val - self.dmg_val
		go.set(self.iHV_url[self.h_counter], "health_per", x_val)
	end
	self.p_c_t = false
end

local function current_villian_vial(self)
	local val = go.get(self.vHV_url[self.v_counter], "health_per")
	if val <= 0 and self.v_counter < 4 then
		self.v_counter = self.v_counter + 1
	end
	msg.post("/villian#villian", "m_n_bttle", {val = self.vHV_url[self.v_counter]})
	if self.add_damage and self.v_counter then
		self.add_damage = false
		local x_val = go.get(self.vHV_url[self.v_counter], "health_per")
		x_val = x_val - self.dmg_val
		go.set(self.vHV_url[self.v_counter], "health_per", x_val)
	end
	self.v_c_t = false
end

function final(self)
end
local function check_for_empty(self)
	local empty_true = true
	for x = 0, hand_size - 1 do
		if self.v_hand[x] ~= nil then
			empty_true = false
		end
	end
	--print(empty_true)
	return empty_true
end
local function refill_villian_hand(self)
	local edge = 240
	for x = 0, hand_size - 1 do
		edge = edge + card_size
		local v = factory.create("go#card_factory", vmath.vector3(edge, top_edge, 1), nul, nul, .3)
		self.v_hand[x] = {id = v, x = edge, y = top_edge}
		msg.post(self.v_hand[x].id, "villian")
		self.counter = 0
		self.abc = 4
	end
end

local function refill_hand(self)
	local x = self.spawn_point_card.x
	local y = bottom_edge
	local c = factory.create("go#card_factory", vmath.vector3(x, y, 1), null, null, .7)
	self.hand = {id = c, x = edge, y = bottom_edge}
	self.card_destroyed = false
	self.active_turn = true
end

function update(self, dt)
	--print("RAAAAAAAAAAAAAWGHT HEEEEYAAAA!!!")
	if self.p_c_t then
		current_hero_vial(self)
	end
	if self.v_c_t then
		current_villian_vial(self)
	end
	if self.p_ready and self.v_ready then
		go.set(self.player_card_url, "p_crash", true)
		go.set(self.v_card_url, "v_crash", true)
	end
	if self.card_destroyed and self.acceptable_turn then
		refill_hand(self)
	end
	if check_for_empty(self) and self.v_destroyed then
		refill_villian_hand(self)
	end
end

function on_input(self, action_id, action)
end

function on_reload(self)
end
